import conf
import time
import json
import requests
from boltiot import Bolt, Sms

# Initializing Bolt IoT device and SMS services
bolt = Bolt(conf.BOLT_API, conf.DEVICE_ID)
sms = Sms(conf.SSID, conf.AUTH_TOKEN, conf.TO_NUMBER, conf.FROM_NUMBER)

# Supported cryptocurrency symbols and names
currency_symbols = {
    "BTC": "Bitcoin",
    "ETH": "Ethereum",
    "XRP": "Ripple",
    "LTC": "Litecoin"
}

# Function to fetch real-time cryptocurrency prices
def price_check(crypto_symbol):
    url = f"https://min-api.cryptocompare.com/data/price?fsym={crypto_symbol.upper()}&tsyms=INR,USD,JPY,EUR"
    try:
        response = requests.get(url)
        response.raise_for_status()  # Check for request errors
        prices = response.json()
        return prices
    except requests.exceptions.RequestException as e:
        print(f"Error fetching price data: {e}")
        return {}

# Function to let the user select the cryptocurrency they want to monitor
def select_crypto():
    print("Select a cryptocurrency to monitor:")
    for symbol, name in currency_symbols.items():
        print(f"{symbol} - {name}")
    while True:
        crypto = input("Enter the symbol (e.g., BTC, ETH, XRP, LTC): ").upper()
        if crypto in currency_symbols:
            return crypto
        else:
            print("Invalid symbol. Please choose from the available options.")

# Function to get the desired sell price from the user
def get_sell_price(currency):
    while True:
        try:
            sell_price = float(input(f"Enter your target sell price in {currency}: "))
            if sell_price > 0:
                return sell_price
            else:
                print("Price must be greater than zero.")
        except ValueError:
            print("Invalid input. Please enter a valid price.")

# Main alert function to monitor prices and notify the user
def monitor_price():
    crypto_symbol = select_crypto()
    print("Select the currency for setting your sell price:")
    for currency in ['INR', 'USD', 'JPY', 'EUR']:
        print(currency)
    sell_currency = input("Enter the currency code (e.g., INR, USD): ").upper()
    sell_price = get_sell_price(sell_currency)
    
    print("\nMonitoring started for {} in {}...".format(currency_symbols[crypto_symbol], sell_currency))
    log_file = "crypto_price_log.txt"  # Log file for recording price history

    while True:
        prices = price_check(crypto_symbol)
        if not prices:
            print("Failed to retrieve prices. Retrying...")
            time.sleep(10)  # Wait and retry in case of API error
            continue
        
        crypto_name = currency_symbols.get(crypto_symbol, "Unknown")
        invest_price = prices.get(sell_currency, 0.0)

        # Log the current price to file
        with open(log_file, "a") as log:
            log.write(f"{time.ctime()}: {crypto_name} price in {sell_currency} is {invest_price}\n")
        
        print(f"\nCurrent prices for {crypto_name} ({crypto_symbol}):")
        for currency, value in prices.items():
            print(f"{currency}: {value}")

        # Alerting conditions based on market price
        if invest_price < sell_price:
            alert_message = f"The {crypto_name} ({crypto_symbol}) is at {invest_price} {sell_currency}, below your target of {sell_price}. Consider investing!"
            send_alert(alert_message, led_pin="0")
        elif invest_price > sell_price:
            alert_message = f"The {crypto_name} ({crypto_symbol}) is at {invest_price} {sell_currency}, above your target of {sell_price}. You might want to be cautious."
            send_alert(alert_message, led_pin="1")
        else:
            print(f"The {crypto_name} ({crypto_symbol}) is at your specified selling price of {sell_price} {sell_currency}. Consider selling.")

        time.sleep(5)
        reset_leds()
        time.sleep(30)  # Delay before checking price again

# Function to send SMS alerts and activate LED indicators
def send_alert(message, led_pin):
    try:
        bolt.digitalWrite(led_pin, "HIGH")  # Turn on specified LED pin
        response = sms.send_sms(message)
        print(f"Status of SMS at Twilio: {response.status}")
        print(message)
    except Exception as e:
        print("Error sending alert:", e)

# Function to turn off LEDs after each alert cycle
def reset_leds():
    try:
        bolt.digitalWrite("0", "LOW")
        bolt.digitalWrite("1", "LOW")
    except Exception as e:
        print("Error resetting LEDs:", e)

# Start monitoring process
monitor_price()

